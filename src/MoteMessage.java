/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MoteMessage'
 * message type.
 */

public class MoteMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new MoteMessage of size 10. */
    public MoteMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MoteMessage of the given data_length. */
    public MoteMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage with the given data_length
     * and base offset.
     */
    public MoteMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage using the given byte array
     * as backing store.
     */
    public MoteMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public MoteMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MoteMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage embedded in the given message
     * at the given base offset.
     */
    public MoteMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MoteMessage embedded in the given message
     * at the given base offset and length.
     */
    public MoteMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MoteMessage> \n";
      try {
        s += "  [gpsCoordinate.x=0x"+Long.toHexString(get_gpsCoordinate_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gpsCoordinate.y=0x"+Long.toHexString(get_gpsCoordinate_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeID=0x"+Long.toHexString(get_nodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sender=0x"+Long.toHexString(get_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timeStamp=0x"+Long.toHexString(get_timeStamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gpsCoordinate.x
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gpsCoordinate.x' is signed (false).
     */
    public static boolean isSigned_gpsCoordinate_x() {
        return false;
    }

    /**
     * Return whether the field 'gpsCoordinate.x' is an array (false).
     */
    public static boolean isArray_gpsCoordinate_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gpsCoordinate.x'
     */
    public static int offset_gpsCoordinate_x() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gpsCoordinate.x'
     */
    public static int offsetBits_gpsCoordinate_x() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'gpsCoordinate.x'
     */
    public int get_gpsCoordinate_x() {
        return (int)getUIntBEElement(offsetBits_gpsCoordinate_x(), 16);
    }

    /**
     * Set the value of the field 'gpsCoordinate.x'
     */
    public void set_gpsCoordinate_x(int value) {
        setUIntBEElement(offsetBits_gpsCoordinate_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'gpsCoordinate.x'
     */
    public static int size_gpsCoordinate_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gpsCoordinate.x'
     */
    public static int sizeBits_gpsCoordinate_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gpsCoordinate.y
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gpsCoordinate.y' is signed (false).
     */
    public static boolean isSigned_gpsCoordinate_y() {
        return false;
    }

    /**
     * Return whether the field 'gpsCoordinate.y' is an array (false).
     */
    public static boolean isArray_gpsCoordinate_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gpsCoordinate.y'
     */
    public static int offset_gpsCoordinate_y() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gpsCoordinate.y'
     */
    public static int offsetBits_gpsCoordinate_y() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'gpsCoordinate.y'
     */
    public int get_gpsCoordinate_y() {
        return (int)getUIntBEElement(offsetBits_gpsCoordinate_y(), 16);
    }

    /**
     * Set the value of the field 'gpsCoordinate.y'
     */
    public void set_gpsCoordinate_y(int value) {
        setUIntBEElement(offsetBits_gpsCoordinate_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'gpsCoordinate.y'
     */
    public static int size_gpsCoordinate_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gpsCoordinate.y'
     */
    public static int sizeBits_gpsCoordinate_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeID
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeID' is signed (false).
     */
    public static boolean isSigned_nodeID() {
        return false;
    }

    /**
     * Return whether the field 'nodeID' is an array (false).
     */
    public static boolean isArray_nodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeID'
     */
    public static int offset_nodeID() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeID'
     */
    public static int offsetBits_nodeID() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'nodeID'
     */
    public int get_nodeID() {
        return (int)getUIntBEElement(offsetBits_nodeID(), 16);
    }

    /**
     * Set the value of the field 'nodeID'
     */
    public void set_nodeID(int value) {
        setUIntBEElement(offsetBits_nodeID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeID'
     */
    public static int size_nodeID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeID'
     */
    public static int sizeBits_nodeID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sender
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sender' is signed (false).
     */
    public static boolean isSigned_sender() {
        return false;
    }

    /**
     * Return whether the field 'sender' is an array (false).
     */
    public static boolean isArray_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sender'
     */
    public static int offset_sender() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sender'
     */
    public static int offsetBits_sender() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'sender'
     */
    public int get_sender() {
        return (int)getUIntBEElement(offsetBits_sender(), 16);
    }

    /**
     * Set the value of the field 'sender'
     */
    public void set_sender(int value) {
        setUIntBEElement(offsetBits_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sender'
     */
    public static int size_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sender'
     */
    public static int sizeBits_sender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeStamp
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeStamp' is signed (false).
     */
    public static boolean isSigned_timeStamp() {
        return false;
    }

    /**
     * Return whether the field 'timeStamp' is an array (false).
     */
    public static boolean isArray_timeStamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timeStamp'
     */
    public static int offset_timeStamp() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeStamp'
     */
    public static int offsetBits_timeStamp() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'timeStamp'
     */
    public int get_timeStamp() {
        return (int)getUIntBEElement(offsetBits_timeStamp(), 16);
    }

    /**
     * Set the value of the field 'timeStamp'
     */
    public void set_timeStamp(int value) {
        setUIntBEElement(offsetBits_timeStamp(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'timeStamp'
     */
    public static int size_timeStamp() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timeStamp'
     */
    public static int sizeBits_timeStamp() {
        return 16;
    }

}
