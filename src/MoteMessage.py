#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'MoteMessage'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 10

# The Active Message type associated with this message.
AM_TYPE = -1

class MoteMessage(tinyos.message.Message.Message):
    # Create a new MoteMessage of size 10.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=10):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <MoteMessage> \n"
        try:
            s += "  [gpsCoordinate.x=0x%x]\n" % (self.get_gpsCoordinate_x())
        except:
            pass
        try:
            s += "  [gpsCoordinate.y=0x%x]\n" % (self.get_gpsCoordinate_y())
        except:
            pass
        try:
            s += "  [nodeID=0x%x]\n" % (self.get_nodeID())
        except:
            pass
        try:
            s += "  [sender=0x%x]\n" % (self.get_sender())
        except:
            pass
        try:
            s += "  [timeStamp=0x%x]\n" % (self.get_timeStamp())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: gpsCoordinate.x
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'gpsCoordinate.x' is signed (False).
    #
    def isSigned_gpsCoordinate_x(self):
        return False
    
    #
    # Return whether the field 'gpsCoordinate.x' is an array (False).
    #
    def isArray_gpsCoordinate_x(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'gpsCoordinate.x'
    #
    def offset_gpsCoordinate_x(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'gpsCoordinate.x'
    #
    def offsetBits_gpsCoordinate_x(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'gpsCoordinate.x'
    #
    def get_gpsCoordinate_x(self):
        return self.getUIntElement(self.offsetBits_gpsCoordinate_x(), 16, 1)
    
    #
    # Set the value of the field 'gpsCoordinate.x'
    #
    def set_gpsCoordinate_x(self, value):
        self.setUIntElement(self.offsetBits_gpsCoordinate_x(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'gpsCoordinate.x'
    #
    def size_gpsCoordinate_x(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'gpsCoordinate.x'
    #
    def sizeBits_gpsCoordinate_x(self):
        return 16
    
    #
    # Accessor methods for field: gpsCoordinate.y
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'gpsCoordinate.y' is signed (False).
    #
    def isSigned_gpsCoordinate_y(self):
        return False
    
    #
    # Return whether the field 'gpsCoordinate.y' is an array (False).
    #
    def isArray_gpsCoordinate_y(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'gpsCoordinate.y'
    #
    def offset_gpsCoordinate_y(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'gpsCoordinate.y'
    #
    def offsetBits_gpsCoordinate_y(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'gpsCoordinate.y'
    #
    def get_gpsCoordinate_y(self):
        return self.getUIntElement(self.offsetBits_gpsCoordinate_y(), 16, 1)
    
    #
    # Set the value of the field 'gpsCoordinate.y'
    #
    def set_gpsCoordinate_y(self, value):
        self.setUIntElement(self.offsetBits_gpsCoordinate_y(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'gpsCoordinate.y'
    #
    def size_gpsCoordinate_y(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'gpsCoordinate.y'
    #
    def sizeBits_gpsCoordinate_y(self):
        return 16
    
    #
    # Accessor methods for field: nodeID
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'nodeID' is signed (False).
    #
    def isSigned_nodeID(self):
        return False
    
    #
    # Return whether the field 'nodeID' is an array (False).
    #
    def isArray_nodeID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'nodeID'
    #
    def offset_nodeID(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'nodeID'
    #
    def offsetBits_nodeID(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'nodeID'
    #
    def get_nodeID(self):
        return self.getUIntElement(self.offsetBits_nodeID(), 16, 1)
    
    #
    # Set the value of the field 'nodeID'
    #
    def set_nodeID(self, value):
        self.setUIntElement(self.offsetBits_nodeID(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'nodeID'
    #
    def size_nodeID(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'nodeID'
    #
    def sizeBits_nodeID(self):
        return 16
    
    #
    # Accessor methods for field: sender
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sender' is signed (False).
    #
    def isSigned_sender(self):
        return False
    
    #
    # Return whether the field 'sender' is an array (False).
    #
    def isArray_sender(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sender'
    #
    def offset_sender(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'sender'
    #
    def offsetBits_sender(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'sender'
    #
    def get_sender(self):
        return self.getUIntElement(self.offsetBits_sender(), 16, 1)
    
    #
    # Set the value of the field 'sender'
    #
    def set_sender(self, value):
        self.setUIntElement(self.offsetBits_sender(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sender'
    #
    def size_sender(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sender'
    #
    def sizeBits_sender(self):
        return 16
    
    #
    # Accessor methods for field: timeStamp
    #   Field type: int
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'timeStamp' is signed (False).
    #
    def isSigned_timeStamp(self):
        return False
    
    #
    # Return whether the field 'timeStamp' is an array (False).
    #
    def isArray_timeStamp(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'timeStamp'
    #
    def offset_timeStamp(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'timeStamp'
    #
    def offsetBits_timeStamp(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'timeStamp'
    #
    def get_timeStamp(self):
        return self.getUIntElement(self.offsetBits_timeStamp(), 16, 1)
    
    #
    # Set the value of the field 'timeStamp'
    #
    def set_timeStamp(self, value):
        self.setUIntElement(self.offsetBits_timeStamp(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'timeStamp'
    #
    def size_timeStamp(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'timeStamp'
    #
    def sizeBits_timeStamp(self):
        return 16
    
